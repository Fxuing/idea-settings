<application>
  <component name="AppStorage">
    <histories>
      <item value="Device" />
      <item value="设备" />
      <item value="dictionary" />
      <item value="字典表" />
      <item value="contact" />
      <item value="contact_id" />
      <item value="凭证" />
      <item value="product name" />
      <item value="assets _name" />
      <item value="assets_name" />
      <item value="ASSETS_NAME" />
      <item value="joint_bank" />
      <item value="JOINT_BANK" />
      <item value="银行存量" />
      <item value=" bank stock" />
      <item value=" back stock" />
      <item value=" stock" />
      <item value="存量" />
      <item value="存了" />
      <item value="pose" />
      <item value="post" />
      <item value="Position" />
      <item value="position" />
      <item value="职位" />
      <item value="the customer import" />
      <item value="customer import" />
      <item value="customer 导入" />
      <item value="customer" />
      <item value="custom" />
      <item value="Program main entry point." />
      <item value="* you're also using the Microservices pattern and need a single point of aggregation for your microservice calls" />
      <item value="Orc Kingdom" />
      <item value="This is the Elven Army!" />
      <item value="Kingdom" />
      <item value="king" />
      <item value="remark" />
      <item value="app info" />
      <item value="应用信息" />
      <item value="application Info" />
      <item value="applicationInfo" />
      <item value="application" />
      <item value="Data Access Object (DAO) is an object that provides an abstract interface to some type of * database or other persistence mechanism. By mapping application calls to the persistence layer, * DAO provide some specific data operations without exposing details of the database. This * isolation supports the Single responsibility principle. It separates what data accesses the * application needs, in terms of domain-specific objects and data types (the public interface of * the DAO), from how these needs can be satisfied with a specific DBMS. * * &lt;p&gt;With the DAO pattern, we can use various method calls to retrieve/add/delete/update data * without directly interacting with the data source. The below example demonstrates basic CRUD * operations: select, add, update, and delete." />
      <item value="legal" />
      <item value="identity card" />
      <item value="identity" />
      <item value="法人身份证" />
      <item value="法人" />
      <item value="runtime error: integer divide by zero" />
      <item value="Compares two {@code long} values numerically. * The value returned is identical to what would be returned by:" />
      <item value="compare" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1202" />
        <entry key="ENGLISH" value="1402" />
        <entry key="ARABIC" value="1" />
        <entry key="IRISH" value="1" />
        <entry key="BOSNIAN" value="2" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="7" />
        <entry key="CATALAN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALTESE" value="1" />
        <entry key="MALAY" value="1" />
        <entry key="PORTUGUESE" value="5" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SOMALI" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="HINDI" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0ebebcc90864b8bc" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>