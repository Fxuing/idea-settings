<application>
  <component name="AppStorage">
    <histories>
      <item value="Build high performance data infrastructure for machine learning, analytics and application data workloads with MinI" />
      <item value="Unsupported unit: Seconds" />
      <item value="remark" />
      <item value="Contents of collection 'items' are updated, but never queried" />
      <item value="比较" />
      <item value="has been injected into other beans [resourceServiceImpl,commonService.ResourceRoleService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example." />
      <item value="Bean with name 'roleResourceServiceImpl' has been injected into other beans [resourceServiceImpl,roleResourceServiceImpl] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example." />
      <item value="Bean with name 'resourceServiceImpl' has been injected into other beans [commonService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example." />
      <item value="Bean with name 'resourceServiceImpl' has been injected into other beans [commonService] in its raw version as part of a circular reference, but has eventually been wrapped" />
      <item value="Thread Local Util" />
      <item value="Type parameter 'T' hides type parameter 'T'" />
      <item value="custom Page" />
      <item value="sep" />
      <item value="计算" />
      <item value="字母" />
      <item value="下划线" />
      <item value="field To Lower" />
      <item value="field Tolower" />
      <item value="field 2 lower" />
      <item value="equals" />
      <item value="equeal" />
      <item value="like" />
      <item value="between" />
      <item value="字段" />
      <item value="filed" />
      <item value="Invalid bound statement (not found): com.sz9hbank.auth.mapper.RoleInfoMapper.selectPageVo" />
      <item value="自定义" />
      <item value="Custom" />
      <item value="Customer" />
      <item value="ProceedingJoinPoint as first parameter is allowed only in @Around advices" />
      <item value="Around" />
      <item value="reason: Incompatible parameter types in lambda expression" />
      <item value="paginate before" />
      <item value="paginate Point Cut" />
      <item value="aspect" />
      <item value="baseMapper in com.baomidou.mybatisplus.extension.service.impl.ServiceImpl required a single bean, but 8 were found:" />
      <item value="Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed" />
      <item value="when Not Black" />
      <item value="new Instance" />
      <item value="Property Mapper" />
      <item value="don't known how to resole" />
      <item value="Deprecated" />
      <item value="since" />
      <item value="Annotation that can be used in combination with {@code @RunWith(SpringRunner.class)}(JUnit 4) and * {@code @ExtendWith(SpringExtension.class)}(JUnit 5) for a typical mybatis test. Can be used when a test focuses * &lt;strong&gt;only&lt;/strong&gt; on mybatis-based components. Since 2.0.1, If you use this annotation on JUnit 5, * {@code @ExtendWith(SpringExtension.class)} can omit on your test class. * &lt;p&gt; * Using this annotation will disable full auto-configuration and instead apply only configuration relevant to mybatis * tests. * &lt;p&gt; * By default, tests annotated with {@code @MybatisTest} will use an embedded in-memory database (replacing any explicit * or usually auto-configured DataSource). The {@link AutoConfigureTestDatabase @AutoConfigureTestDatabase} annotation * can be used to override these settings. * &lt;p&gt; * If you are looking to load your full application configuration, but use an embedded database, you should consider * {@link SpringBootTest @SpringBootTest} combined with {@link AutoConfigureTestDatabase @AutoConfigureTestDatabase} * rather than this annotation." />
      <item value="java.sql.SQLException: No value specified for parameter 1" />
      <item value="parameterize" />
      <item value="prepare" />
      <item value="Executor" />
      <item value="Interceptor" />
      <item value="Instantiation of utility class 'ThreadLocalUtil'" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1887" />
        <entry key="ENGLISH" value="2082" />
        <entry key="ARABIC" value="1" />
        <entry key="IRISH" value="1" />
        <entry key="BOSNIAN" value="2" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="8" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="ROMANIAN" value="4" />
        <entry key="MALTESE" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="MALAY" value="3" />
        <entry key="PORTUGUESE" value="7" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SOMALI" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="HINDI" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0ebebcc90864b8bc" />
      </youdao-translate>
    </option>
  </component>
</application>